#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN D8                 //--> SDA / SS is connected to pinout D8
#define RST_PIN D0                //--> RST is connected to pinout D0
MFRC522 mfrc522(SS_PIN, RST_PIN); //--> Create MFRC522 instance.

#define ON_Board_LED 2 //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

const char *ssid = "HRD_Casual";
const char *password = "HRD@IMPACT";
WiFiClient wifiClient;
const int buzzer = D4; //buzzer to arduino pin D6
ESP8266WebServer server(80); //--> Server on port 80
int readsuccess;
byte readcard[4];
char str[32] = "";
String StrUID;

//-----------------------------------------------------------------------------------------------SETUP------------------------------------------------------------------------------------------------------------//
void setup()
{
    Serial.begin(9600); // tialize serial communications with the PC
    SPI.begin();        //--> Init SPI bus
    mfrc522.PCD_Init(); //--> Init MFRC522 card

    delay(500);

    WiFi.begin(ssid, password); //--> Connect to your WiFi router
    Serial.println("");

    pinMode(ON_Board_LED, OUTPUT);
    digitalWrite(ON_Board_LED, HIGH); //--> Turn off Led On Board

    //----------------------------------------Wait for connection
    Serial.print("Connecting");
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
        digitalWrite(ON_Board_LED, LOW);
        delay(250);
        digitalWrite(ON_Board_LED, HIGH);
        delay(250);
    }
    digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
    //----------------------------------------If successfully connected to the wifi router, the IP Address that will be visited is displayed in the serial monitor
    Serial.println("");
    Serial.print("Successfully connected to : ");
    Serial.println(ssid);
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());

    Serial.println("Please tag a card or keychain to see the UID !");
    Serial.println("");

    pinMode(buzzer, OUTPUT); // Set buzzer - pin D6 as an output
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------LOOP---------------------------------------------------------------------------------------//
void loop()
{
    // put your main code here, to run repeatedly
    readsuccess = getid();
 
    if (readsuccess)
    {
        digitalWrite(ON_Board_LED, LOW);
        String token = getToken();
        getUser(token);
        delay(1000);
        digitalWrite(ON_Board_LED, HIGH);
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//----------------------------------------Procedure for reading and obtaining a UID from a card or keychain---------------------------------------------------------------------------------//
int getid()
{
    if (!mfrc522.PICC_IsNewCardPresent())
    {
        return 0;
    }
    if (!mfrc522.PICC_ReadCardSerial())
    {
        return 0;
    }

    Serial.print("THE UID OF THE SCANNED CARD IS : ");

    tone(buzzer, 2000); // Send 2KHz sound signal...
//    digitalWrite(led,HIGH);
    delay(1000);
    noTone(buzzer);
//    digitalWrite(led,LOW);

    for (int i = 0; i < 4; i++)
    {
        readcard[i] = mfrc522.uid.uidByte[i]; // storing the UID of the tag in readcard
        array_to_string(readcard, 4, str);
        StrUID = str;
    }
    mfrc522.PICC_HaltA();
    return 1;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------Procedure to change the result of reading an array UID into a string------------------------------------------------------------------------------//
void array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i * 2 + 0] = nib1 < 0xA ? '0' + nib1 : 'A' + nib1 - 0xA;
        buffer[i * 2 + 1] = nib2 < 0xA ? '0' + nib2 : 'A' + nib2 - 0xA;
    }
    buffer[len * 2] = '\0';
}
//--------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

String getToken()
{
    HTTPClient https; // Declare object of class HTTPClient

    String UIDresultSend, postData;
    UIDresultSend = StrUID;

    // Post Data
    postData = "UIDresult=" + UIDresultSend;
    String url = "http://18.143.108.104/api/v2/authentication/token?replyString=true";

    https.begin(wifiClient, url);                        // Specify request destination
    https.addHeader("Content-Type", "application/json"); // Specify content-type header

    int httpCode = https.POST("{\"clientId\": \"im-backoffice\", \"clientSecret\": \"mK4NDHQUf8acDUSg4EcxS7Irq54JuMVn\"}"); // Send the request
    String payload = https.getString();                                                                                     // Get the response payload

    Serial.println(UIDresultSend);
    Serial.println(httpCode); // Print HTTP return code

    https.end(); // Close connection

    return payload;
}

void getUser(String token)
{
    HTTPClient https; // Declare object of class HTTPClient

    String UIDresultSend, postData;
    UIDresultSend = StrUID; 

    // Post Data
    postData = "UIDresult=" + UIDresultSend;
    String url = "http://18.143.108.104/api/v2/users?enableSocket=true&station=4&cardId=" + StrUID;

    https.begin(wifiClient, url);                        // Specify request destination
    https.addHeader("Content-Type", "application/json"); // Specify content-type header
    https.addHeader("Authorization", "Bearer " + token);

    int httpCode = https.GET();         // Send the request
    String payload = https.getString(); // Get the response payload

    Serial.println(UIDresultSend);
    Serial.println(httpCode); // Print HTTP return code

    https.end(); // Close connection
}
