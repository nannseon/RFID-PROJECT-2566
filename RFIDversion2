#include <Keypad_I2C.h>
#include <Keypad.h>
#include <SPI.h>
//#include <RFID.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <MFRC522.h>


//#define SS_PIN  5  // ESP32 pin GIOP5 
//#define RST_PIN 27 // ESP32 pin GIOP27 

#define I2CADDR 0x21

#define SS_PIN 5
#define RST_PIN 27

const byte ROWS = 4;  // กำหนดจำนวนของ Rows
const byte COLS = 4;

char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// กำหนด Pin ที่ใช้งาน (4x4)
byte rowPins[ROWS] = {0, 1, 2, 3};
byte colPins[COLS] = {4, 5, 6, 7};

Keypad_I2C keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS, I2CADDR, PCF8574 );
Keypad_I2C keypad2( makeKeymap(keys), rowPins, colPins, ROWS, COLS, I2CADDR, PCF8574 );
LiquidCrystal_I2C lcd(0x27, 16, 2);  
//RFID rfid(SS_PIN, RST_PIN);
MFRC522 mfrc522(SS_PIN, RST_PIN);

String stationName = "Station ";
String stationNumber = "";

String keyinput = "";
String keyinput2 = "";
byte keyindex = 0;
byte keyindex2 = 0;

int cursorColumn = 0;
int buzzer_pin = 4;
unsigned long times;
unsigned long times2;
byte faildelay = 0;
const char* ssid = "HRD_Casual";
const char* password =  "HRD@IMPACT";
//String serverName = "https://172.20.10.4/stations";
String serverName = "https://core-sso.hr-impact.co/api/v2/";
unsigned long lastTime = 0;
unsigned long timerDelay = 5000;
WiFiClient wifiClient;

int serNum0;
int serNum1;
int serNum2;
int serNum3;
int serNum4;

int readsuccess;
byte readcard[4];
char str[32] = "";
String StrUID;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Wire.begin();  // เรียกการเชื่อมต่อ Wire
  SPI.begin(); // init SPI bus
  //rfid.init(); // init MFRC522 
  mfrc522.PCD_Init();
  keypad.begin( makeKeymap(keys) );
  keypad2.begin( makeKeymap(keys) );
  pinMode(buzzer_pin,OUTPUT);
  digitalWrite(buzzer_pin,LOW);
  lcd.begin();
  lcd.backlight();

  WiFi.begin(ssid, password);
  Serial.println("Connecting");
  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    lcd.setCursor(4, 0);
    lcd.print(stationName);
    lcd.setCursor(0, 1);
    lcd.print("Please Wait...");
  }
  Serial.print("Connect Success");
  lcd.clear();
  lcd.setCursor(4, 0);
  lcd.print(stationName);
  lcd.setCursor(0, 1);
  lcd.print("Connect Success");
  times = millis();
  
  
  
  lcd.clear();
  
}

void loop() {

        if(stationNumber == ""){
          lcd.setCursor(0, 0);
          lcd.print("Input Station");
          char key = keypad.getKey();
          if (key != NO_KEY) {
            stationNumber += key;
            Serial.println(key);
            lcd.clear();
          }
          
        }else{ 
          
        lcd.setCursor(3, 0);
        lcd.print(stationName + stationNumber);
        lcd.setCursor(0, 1);
        lcd.print("Scan Keycard...");
        //keyinput = "";
        //keyindex = 0;
        delay(3000);
        readsuccess = getid();
        if (readsuccess)
        {
            Serial.print(StrUID);
            String token = getToken();
            getUser(token);
            getConnectionRegister(StrUID,stationNumber);
            digitalWrite(buzzer_pin,HIGH);
            delay(500);
            digitalWrite(buzzer_pin,LOW);
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(stationName);
            lcd.setCursor(3, 1);
            lcd.print("Thank you");
            lcd.clear();
            delay(3000);
        }
       }
  
}


void getConnectionRegister(String keycardNumber,String stationNumber) {
  if ((millis() - lastTime) > timerDelay) {
    //Check WiFi connection status
    if(WiFi.status()== WL_CONNECTED){
      HTTPClient http;

      String serverPath = serverName + "users?cardId="+keycardNumber+"&enableSocket=true&station="+stationNumber;
      
      // Your Domain name with URL path or IP address with path
      http.begin(serverPath.c_str());
      
      // If you need Node-RED/server authentication, insert user and password below
      //http.setAuthorization("REPLACE_WITH_SERVER_USERNAME", "REPLACE_WITH_SERVER_PASSWORD");
      
      // Send HTTP GET request
      int httpResponseCode = http.GET();
      
      if (httpResponseCode>0) {
        Serial.print("HTTP Response code: ");
        Serial.println(httpResponseCode);
        String payload = http.getString();
        Serial.println(payload);
      }
      else {
        Serial.print("Error code: ");
        Serial.println(httpResponseCode);
      }
      // Free resources
      http.end();
    }
    else {
      Serial.println("WiFi Disconnected");
    }
    lastTime = millis();
  }
}


int getid()
{
    if (!mfrc522.PICC_IsNewCardPresent())
    {
        return 0;
    }
    if (!mfrc522.PICC_ReadCardSerial())
    {
        return 0;
    }

    Serial.print("THE UID OF THE SCANNED CARD IS : ");
    
    for (int i = 0; i < 4; i++)
    {
        readcard[i] = mfrc522.uid.uidByte[i]; // storing the UID of the tag in readcard
        array_to_string(readcard, 4, str);
        StrUID = str;
    }
    mfrc522.PICC_HaltA();
    return 1;
}

void array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i * 2 + 0] = nib1 < 0xA ? '0' + nib1 : 'A' + nib1 - 0xA;
        buffer[i * 2 + 1] = nib2 < 0xA ? '0' + nib2 : 'A' + nib2 - 0xA;
    }
    buffer[len * 2] = '\0';
}

String getToken()
{
    HTTPClient https; // Declare object of class HTTPClient

    String UIDresultSend, postData;
    UIDresultSend = StrUID;

    // Post Data
    postData = "UIDresult=" + UIDresultSend;
    String url = "http://18.143.108.104/api/v2/authentication/token?replyString=true";

    https.begin(wifiClient, url);                        // Specify request destination
    https.addHeader("Content-Type", "application/json"); // Specify content-type header

    int httpCode = https.POST("{\"clientId\": \"im-backoffice\", \"clientSecret\": \"mK4NDHQUf8acDUSg4EcxS7Irq54JuMVn\"}"); // Send the request
    String payload = https.getString();                                                                                     // Get the response payload

    Serial.println(UIDresultSend);
    Serial.println(httpCode); // Print HTTP return code

    https.end(); // Close connection
    return payload;
}

void getUser(String token)
{
    HTTPClient https; // Declare object of class HTTPClient

    String UIDresultSend, postData;
    UIDresultSend = StrUID;

    // Post Data
    postData = "UIDresult=" + UIDresultSend;
    String url = "http://18.143.108.104/api/v2/users?enableSocket=true&station=" + stationNumber + "&cardId=" + StrUID;
    https.begin(wifiClient, url);                        // Specify request destination
    https.addHeader("Content-Type", "application/json"); // Specify content-type header
    https.addHeader("Authorization", "Bearer " + token);

    int httpCode = https.GET();         // Send the request
    String payload = https.getString(); // Get the response payload

    Serial.println(UIDresultSend);
    Serial.println(httpCode); // Print HTTP return code

    https.end(); // Close connection
}
